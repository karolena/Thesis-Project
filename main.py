import nest_asyncio

nest_asyncio.apply()
import json
import logging

import os
from datetime import datetime

from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

from config import BOT_TOKEN

TOKEN = BOT_TOKEN

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
try:
    with open("Updated_EVI.json", 'r', encoding='utf-8') as f:
        exams_data = json.load(f)
except FileNotFoundError:
    logging.error("–§–∞–π–ª Updated_EVI.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    exams_data = {}
except json.JSONDecodeError:
    logging.error("–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è JSON.")
    exams_data = {}

# –°–∏—Å—Ç–µ–º–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è 2019-2021 —Ç–∞ 2022 —Ä–æ–∫—ñ–≤
score_conversion_2019_2021 = {
    0: "–Ω–µ —Å–∫–ª–∞–≤", 1: "–Ω–µ —Å–∫–ª–∞–≤", 2: "–Ω–µ —Å–∫–ª–∞–≤", 3: "–Ω–µ —Å–∫–ª–∞–≤", 4: "–Ω–µ —Å–∫–ª–∞–≤",
    5: "–Ω–µ —Å–∫–ª–∞–≤", 6: "–Ω–µ —Å–∫–ª–∞–≤", 7: "–Ω–µ —Å–∫–ª–∞–≤", 8: "–Ω–µ —Å–∫–ª–∞–≤", 9: "–Ω–µ —Å–∫–ª–∞–≤",
    10: "–Ω–µ —Å–∫–ª–∞–≤", 11: "–Ω–µ —Å–∫–ª–∞–≤", 12: 100, 13: 106, 14: 111, 15: 116, 16: 121,
    17: 125, 18: 128, 19: 132, 20: 135, 21: 138, 22: 141, 23: 144, 24: 147,
    25: 150, 26: 153, 27: 156, 28: 159, 29: 162, 30: 165, 31: 168, 32: 170,
    33: 173, 34: 177, 35: 180, 36: 183, 37: 186, 38: 189, 39: 192, 40: 195,
    41: 197, 42: 200
}

score_conversion_2022 = {
    0: "–Ω–µ —Å–∫–ª–∞–≤", 1: "–Ω–µ —Å–∫–ª–∞–≤", 2: "–Ω–µ —Å–∫–ª–∞–≤", 3: "–Ω–µ —Å–∫–ª–∞–≤", 4: "–Ω–µ —Å–∫–ª–∞–≤",
    5: 100, 6: 108, 7: 116, 8: 124, 9: 130, 10: 134, 11: 137, 12: 140, 13: 143, 14: 146, 15: 148, 16: 150, 17: 152,
    18: 154, 19: 157, 20: 160, 21: 162, 22: 164, 23: 167,
    24: 170, 25: 174, 26: 177, 27: 182, 28: 188, 29: 194, 30: 200
}

rating_messages = {
    "–Ω–µ —Å–∫–ª–∞–≤": "Ooops, –º–æ–∂–µ —Å–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑? –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–≤—á–∏—Ç–∏—Å—è —â–µüôÉ",
    (100, 120): "Congratulations, –ø–æ—Ä—ñ–≥ –ø—Ä–æ–π–¥–µ–Ω–æü§ó",
    (121, 160): "Well done, –Ω–µ–ø–æ–≥–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Çüòç",
    (161, 180): "AMAZING, —á—É–¥–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Çü§ù",
    (181, 199): "OMG YOUR RESULT IS REALLY COOLüòØ",
    200: "This is the highest score, we are so proud of you!ü•≥"
}


def convert_score_to_200_scale(year, score):
    if year in ['2019', '2020', '2021']:
        conversion = score_conversion_2019_2021
    else:
        conversion = score_conversion_2022
    return conversion.get(score, "–Ω–µ —Å–∫–ª–∞–≤")


# –ö–æ–º–∞–Ω–¥–∞ /–æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø—É—Å–∫—É
def create_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("2022/2023", callback_data='2022')],
        [InlineKeyboardButton("2021", callback_data='2021')],
        [InlineKeyboardButton("2020", callback_data='2020')],
        [InlineKeyboardButton("2019", callback_data='2019')],
        [InlineKeyboardButton("–£—Å–µ –ø—Ä–æ –Ñ–í–Üüìù", url='https://testportal.gov.ua/yedynyj-vstupnyj-ispyt-2')],
        [InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ", callback_data='resources')],
        [InlineKeyboardButton("–ó–∞–ª–∏—à—Ç–µ Feedback üì£", callback_data='leave_feedback')]
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("2022/2023", callback_data='2022')],
        [InlineKeyboardButton("2021", callback_data='2021')],
        [InlineKeyboardButton("2020", callback_data='2020')],
        [InlineKeyboardButton("2019", callback_data='2019')],
        [InlineKeyboardButton(
            "–£—Å–µ –ø—Ä–æ –Ñ–í–Üüìù(–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –∫–∞–ª–µ–Ω–¥–∞—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ —ñ–Ω.)",
            url='https://testportal.gov.ua/yedynyj-vstupnyj-ispyt-2/')],
        [InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ", callback_data='resources')],
        [InlineKeyboardButton("–ó–∞–ª–∏—à—Ç–µ Feedback üì£", callback_data='leave_feedback')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            'üéì–í—ñ—Ç–∞—é –í–∞—Å –≤ –±–æ—Ç—ñ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –Ñ–í–Ü! –î–æ–ø–æ–º–æ–∂—É –í–∞–º —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ —ñ—Å–ø–∏—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó‚úçÔ∏è! –Ø–∫–∏–π —Ä—ñ–∫ —Ö–æ—á–µ—à –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏?üìÖ:',
            reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            'üéì–í—ñ—Ç–∞—é –í–∞—Å –≤ –±–æ—Ç—ñ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –Ñ–í–Ü! –î–æ–ø–æ–º–æ–∂—É –í–∞–º —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ —ñ—Å–ø–∏—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó‚úçÔ∏è! –Ø–∫–∏–π —Ä—ñ–∫ —Ö–æ—á–µ—à –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏?üìÖ:',
            reply_markup=reply_markup)

        context.user_data['text'] = '–¢–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏'


# –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó resources
async def resources(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    resource_message = (
        "–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ:\n"
        "- –í–µ–±—ñ–Ω–∞—Ä ¬´–Ñ–í–Ü-2024: –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó —ñ –ª–∞–π—Ñ—Ö–∞–∫–∏¬ª (—Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —ñ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –Ñ–í–Ü: –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏, —á–∞—Å—Ç–∏–Ω–∏ –¢–ó–ù–ö) (https://www.youtube.com/watch?v=u3is1GuWWVk)\n"
        "- –†–æ–∑–±—ñ—Ä –¥–µ–º–æ —Ç–µ—Å—Ç—É –Ñ–í–Ü 2022/2023 –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏: –∑–∞–≤–¥–∞–Ω–Ω—è ‚Ññ4 (1) (http://www.youtube.com/watch?v=KwUEPw5GtgA)\n"
        "- –Ñ–í–Ü –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ 2023 —Ä–æ–∑–±—ñ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è 1 –î–ï–ú–û —Ç–µ—Å—Ç—É –£–¶–û–Ø–û (https://www.youtube.com/watch?v=NOj2yZP4rCc)\n"
        "- –ù–µ –ø–æ—á–∏–Ω–∞–π –≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –Ñ–í–Ü, –ø–æ–∫–∏ –Ω–µ –ø–æ–¥–∏–≤–∏—à—Å—è —Ü–µ –≤—ñ–¥–µ–æ —ñ –ª–æ–≥—ñ–∫–∞ (–¢–ó–ù–ö) 2024 (https://www.youtube.com/watch?v=BZWPmlZRZb8)\n"
        "- –Ø–∫ —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ –Ñ–í–Ü-2024 (–ª–∞–π—Ñ—Ö–∞–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ñ–í–Ü –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó) (https://grade.ua/uk/blog/uk-how-to-hack-evi/)\n"
        "- –Ñ–í–Ü: –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Ç–µ—Å—Ç—É –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ (https://onlinelawschool.pro/znoenglish?gad_source=1&gclid=Cj0KCQjw1qO0BhDwARIsANfnkv9G1yd_ROTHW8PiVNPqnwjopsRgYrK3F6g1cGY-K6M42POmNmh6KnYaApbeEALw_wcB)\n"
        "- –†–æ–∑–±—ñ—Ä –Ñ–í–Ü —Å–ª—ñ–≤, —è–∫—ñ –ø–æ–ª–µ–≥—à–∞—Ç—å –≤—Å—Ç—É–ø –¥–æ –º–∞–≥—ñ—Å—Ç—Ä–∞—Ç—É—Ä–∏ | —î–¥–∏–Ω–∏–π –≤—Å—Ç—É–ø–Ω–∏–π —ñ—Å–ø–∏—Ç (–∑–∞ —Ç–µ—Å—Ç–æ–º 2020 —Ä–æ–∫—É) (https://www.youtube.com/watch?v=wWbAO5s7goE)\n"
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')]
    ]

    if update.message:
        await update.message.reply_text(resource_message, reply_markup=InlineKeyboardMarkup(keyboard))
    elif update.callback_query:
        await update.callback_query.message.reply_text(resource_message, reply_markup=InlineKeyboardMarkup(keyboard))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —É context.user_data –±–µ–∑ –∑–º—ñ–Ω–∏ update.message
    context.user_data['text'] = '–¢–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏'


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    await start(update, context)


# –í–∏–±—ñ—Ä —Ä–æ–∫—É
async def year_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = query.data
    context.user_data['selected_year'] = selected_year
    context.user_data['total_score'] = 0
    context.user_data['scores'] = {'Reading': 0, 'Use of English': 0}

    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        keyboard = [
            [InlineKeyboardButton(part.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏'), callback_data=f"part_{part.get('name', 'unknown')}")]
            for part in parts]
        keyboard.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –¥–ª—è {selected_year} —Ä–æ–∫—Éüìö:", reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É
async def part_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_part = query.data.split('_')[1]
    context.user_data['selected_part'] = selected_part
    context.user_data['part_score'] = 0

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        tasks = next(part['tasks'] for part in parts if part.get('name', 'unknown') == selected_part)
        context.user_data['tasks'] = tasks
        context.user_data['current_task_index'] = 0

        await send_task(update, context)


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tasks = context.user_data['tasks']
    current_task_index = context.user_data['current_task_index']
    task = tasks[current_task_index]

    text = f"–ó–∞–≤–¥–∞–Ω–Ω—è {task['task_number']}:\n{task['instructions']}\n\n"
    for t in task['texts']:
        text += f"{t}\n\n"

    for i, choice in enumerate(task['choices']):
        text += f"{chr(65 + i)}. {choice}\n"

    keyboard = [
        [InlineKeyboardButton(chr(65 + i), callback_data=f"answer_{chr(65 + i)}")] for i in range(len(task['choices']))
    ]
    keyboard.append([InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–µ—Å—Ç‚ùå", callback_data='finish')])
    keyboard.append(
        [InlineKeyboardButton("–°–ª–æ–≤–Ω–∏—áüÜó", url='https://www.dictionary.cambridge.org/uk/dictionary/english-ukrainian/')])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —á–∞—Å—Ç–∏–Ω —Ü—å–æ–≥–æ —Ä–æ–∫—É‚óÄÔ∏è", callback_data='back_to_parts')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_answer = query.data.split('_')[1]
    tasks = context.user_data['tasks']
    current_task_index = context.user_data['current_task_index']
    task = tasks[current_task_index]
    correct_answer = task['answers'][0]

    if user_answer == correct_answer:
        context.user_data['part_score'] += int(task['other_option']['score'])
        response = "‚úÖ–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –º–æ–ª–æ–¥–µ—Ü—å, —Ç–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏üòä!"
        next_button = [
            [InlineKeyboardButton("–î–ê–õ–Ü‚ñ∂Ô∏è", callback_data='next_task')]  # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "–î–ê–õ–Ü"
        ]
    else:
        response = f"‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç—Ä–µ–±–∞ –±—É—Ç–∏ —É–≤–∞–∂–Ω—ñ—à–µüòû! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}"
        next_button = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ –∑–∞–≤–¥–∞–Ω–Ω—è‚óÄÔ∏è", callback_data='retry_task')],
            [InlineKeyboardButton("–î–ê–õ–Ü‚ñ∂Ô∏è", callback_data='next_task')]  # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "–î–ê–õ–Ü"
        ]

    reply_markup = InlineKeyboardMarkup(next_button)
    await query.edit_message_text(text=response, reply_markup=reply_markup)


from telegram import InlineKeyboardButton, InlineKeyboardMarkup


async def handle_retry_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    await send_task(update, context)  # –ó–Ω–æ–≤—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ —Å–∞–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è

    # –î–æ–¥–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞–ª—ñ"
    keyboard = [
        [
            InlineKeyboardButton("–î–∞–ª—ñ", callback_data='next_task')
            ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await query.message.edit_reply_markup(reply_markup)


async def handle_next_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    current_task_index = context.user_data['current_task_index']
    tasks = context.user_data['tasks']

    # –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    if current_task_index + 1 < len(tasks):
        context.user_data['current_task_index'] += 1
        await send_task(update, context)  # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    else:
        # –Ø–∫—â–æ —Ü–µ –±—É–ª–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è, –ø–æ–∫–∞–∂—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        await send_part_results(update, context)


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ —Ä–æ–∑–¥—ñ–ª–æ–º
async def send_part_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    part_score = context.user_data['part_score']
    selected_part = context.user_data['selected_part']
    total_tasks = len(context.user_data['tasks'])  # –ü—Ä–∏–ø—É—â–µ–Ω–Ω—è: –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–∞—î –æ–¥–∏–Ω –±–∞–ª

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫
    context.user_data['total_score'] += part_score

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è —á–∞—Å—Ç–∏–Ω–∏ Reading
    part_buttons = []

    if selected_part == 'Reading':
        part_buttons.append([InlineKeyboardButton("–ü–ï–†–ï–ô–¢–ò –¥–æ Use of EnglishüöÄ", callback_data='go_to_use_of_english')])
        part_buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —á–∞—Å—Ç–∏–Ω —Ü—å–æ–≥–æ —Ä–æ–∫—É‚óÄÔ∏è", callback_data='back_to_parts')])
        part_buttons.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')])

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup(part_buttons)

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è Reading
        await update.callback_query.message.reply_text(
            f"–í–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ —Ü—é —á–∞—Å—Ç–∏–Ω—É‚úîÔ∏è: {selected_part}.\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Çüìà: {part_score}/{total_tasks} –±–∞–ª—ñ–≤.",
            reply_markup=reply_markup
        )

    # –Ø–∫—â–æ —á–∞—Å—Ç–∏–Ω–∞ 'Use of English', –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ main_buttons
    elif selected_part == 'Use of English':
        main_buttons = [
            [InlineKeyboardButton("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ÉüèÜ", callback_data='finish')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —á–∞—Å—Ç–∏–Ω —Ü—å–æ–≥–æ —Ä–æ–∫—É‚óÄÔ∏è", callback_data='back_to_parts')],
            [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')],
            [InlineKeyboardButton("–°–ª–æ–≤–Ω–∏—áüÜó",
                                  url='https://www.dictionary.cambridge.org/uk/dictionary/english-ukrainian/')],
            [InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ", callback_data='resources')]
        ]

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        main_reply_markup = InlineKeyboardMarkup(main_buttons)

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è Use of English
        await update.callback_query.message.reply_text(
            f"–í–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ —Ü—é —á–∞—Å—Ç–∏–Ω—É‚úîÔ∏è: {selected_part}.\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Çüìà: {part_score}/{total_tasks} –±–∞–ª—ñ–≤.",
            reply_markup=main_reply_markup
        )


def calculate_results():
    # –ü—Ä–∏–∫–ª–∞–¥ –ª–æ–≥—ñ–∫–∏ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    total_score = 'total_score'  # –ó–∞–¥–∞–π—Ç–µ –≤–∞—à—É –ª–æ–≥—ñ–∫—É –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
    max_score = 'max_score'  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –º–æ–∂–ª–∏–≤–∏–π –±–∞–ª
    return {'total_score': total_score, 'max_score': max_score}


async def handle_next_button(update: Update) -> None:
    query = update.callback_query
    # –ó–±—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É
    # –Ø–∫—â–æ 'user_id' –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ä—è–¥–æ–∫
    results = calculate_results()  # –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ 'user_id', –ø—Ä–∏–±–µ—Ä—ñ—Ç—å –π–æ–≥–æ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó

    total_score = results['total_score']
    max_score = results['max_score']

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
    result_text = f"–í–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏ —Ü–µ–π —Ç–µ—Å—Ç‚úîÔ∏è\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{max_score} –±–∞–ª—ñ–≤."

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.message.edit_text(result_text)


async def handle_go_to_use_of_english(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        use_of_english_part = next((part for part in parts if part.get('name') == 'Use of English'), None)

        if use_of_english_part:
            context.user_data['selected_part'] = 'Use of English'
            context.user_data['part_score'] = 0
            context.user_data['tasks'] = use_of_english_part['tasks']
            context.user_data['current_task_index'] = 0

            await send_task(update, context)
        else:
            await query.edit_message_text(text="–ß–∞—Å—Ç–∏–Ω–∞ 'Use of English' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")


async def handle_resources(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await resources(update, context)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É
async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = context.user_data['selected_year']
    total_score = context.user_data['total_score']

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 200-–±–∞–ª—å–Ω–æ—é —à–∫–∞–ª–æ—é
    converted_score = convert_score_to_200_scale(selected_year, total_score)

    # –ü—ñ–¥–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É
    for key, message in rating_messages.items():
        if isinstance(key, tuple) and key[0] <= converted_score <= key[1]:
            rating_message = message
            break
        elif converted_score == key:
            rating_message = message
            break
    else:
        rating_message = rating_messages["–Ω–µ —Å–∫–ª–∞–≤"]

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = (
        f"–í—ñ—Ç–∞—î–º–æüëè! –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ‚úîÔ∏è {selected_year} —Ä—ñ–∫.\n"
        f"–í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ªüéØ: {total_score} –±–∞–ª—ñ–≤ –∑ –º–æ–∂–ª–∏–≤–∏—Ö.\n"
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ 200-–±–∞–ª—å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è üèÖ: {converted_score}.\n"
        f"{rating_message}"
    )

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —á–∞—Å—Ç–∏–Ω —Ü—å–æ–≥–æ —Ä–æ–∫—É‚óÄÔ∏è", callback_data='back_to_parts')],
        [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')],
        [InlineKeyboardButton(
            "–£—Å–µ –ø—Ä–æ –Ñ–í–Üüìù (–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –∫–∞–ª–µ–Ω–¥–∞—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ —ñ–Ω.)",
            url='https://testportal.gov.ua/yedynyj-vstupnyj-ispyt-2/')],
        [InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ", callback_data='resources')],
        [InlineKeyboardButton("–ó–∞–ª–∏—à—Ç–µ Feedback üì£", callback_data='leave_feedback')]
    ]

    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await query.edit_message_text(result_message, reply_markup=InlineKeyboardMarkup(keyboard))


async def back_to_parts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        keyboard = [
            [InlineKeyboardButton(part.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏'), callback_data=f"part_{part.get('name', 'unknown')}")]
            for part in parts]
        keyboard.append([InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –¥–ª—è {selected_year} —Ä–æ–∫—Éüìö:", reply_markup=reply_markup)


async def handle_back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await start(update, context)


async def leave_feedback(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    feedback_keyboard = [
        [InlineKeyboardButton("–¢–ê–ö", callback_data='feedback_yes')],
        [InlineKeyboardButton("–ù–Ü", callback_data='feedback_no')]
    ]
    reply_markup = InlineKeyboardMarkup(feedback_keyboard)

    await query.edit_message_text("–ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –í–∞–º –±–æ—Çü§îüí≠?", reply_markup=reply_markup)


async def handle_feedback_yes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–î—è–∫—É—é –∑–∞ –í–∞—à –≤—ñ–¥–≥—É–∫ü´∂üèªüôèüí¨! –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, –∑–∞–ª–∏—à—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ –≤–∞—à–µ –≤—Ä–∞–∂–µ–Ω–Ω—è:"
    )
    context.user_data['awaiting_comment'] = True  # –°—Ç–∞–Ω –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è

    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')]
        ]
    )
    await query.message.reply_text("–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä:", reply_markup=reply_markup)


async def handle_feedback_no(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–î—è–∫—É—é –∑–∞ —á–µ—Å–Ω—ñ—Å—Ç—å, –∑–∞–ª–∏—à—Ç–µ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—éüòäüìù:"
    )
    context.user_data['awaiting_feedback'] = True

    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')]
        ]
    )
    await query.message.reply_text("–í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä:", reply_markup=reply_markup)


async def back_to_main_menu(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    reply_markup = create_main_menu_keyboard()  # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    await query.edit_message_text("–í—ñ—Ç–∞—î–º–æ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)


async def handle_user_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_feedback'):
        feedback = update.message.text
        rating = context.user_data.get('feedback_rating', 'negative')

        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–≥—É–∫
        add_feedback(update.message.from_user.id, feedback, rating)

        context.user_data['awaiting_feedback'] = False
        await update.message.reply_text("–î—è–∫—É—é –∑–∞ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é! ü´∂üèªüíñ", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')]]))

    elif context.user_data.get('awaiting_comment'):
        comment = update.message.text
        add_feedback(update.message.from_user.id, comment, "positive")  # –í–≤–∞–∂–∞—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º

        context.user_data['awaiting_comment'] = False
        await update.message.reply_text("–î—è–∫—É—é –∑–∞ –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä! ü´∂üèªüíñ", reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—éüè†", callback_data='back_to_main_menu')]]))


# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª feedback.json, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î
initial_data = {"feedbacks": []}

with open("feedback.json", "w", encoding="utf-8") as f:
    json.dump(initial_data, f, ensure_ascii=False, indent=4)


def add_feedback(user_id, feedback, rating):
    feedback_data = {"user_id": user_id, "timestamp": datetime.now().isoformat(), "feedback": feedback,
                     "rating": rating}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª
    if os.path.exists("feedback.json"):
        with open("feedback.json", "r", encoding="utf-8") as feedback_file:  # Renamed 'f' to 'feedback_file'
            data = json.load(feedback_file)
    else:
        data = {"feedbacks": []}

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –≤—ñ–¥–≥—É–∫
    data["feedbacks"].append(feedback_data)

    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
    with open("feedback.json", "w", encoding="utf-8") as feedback_file:  # Renamed 'f' to 'feedback_file'
        json.dump(data, feedback_file, ensure_ascii=False, indent=4)


def count_positive_feedbacks():
    if os.path.exists("feedback.json"):
        with open("feedback.json", "r", encoding="utf-8") as file:  # Renamed 'f' to 'file'
            data = json.load(file)

        positive_feedbacks = [feedback for feedback in data["feedbacks"] if feedback.get("rating") == "positive"]
        return len(positive_feedbacks)
    return 0


def count_negative_feedbacks():
    if os.path.exists("feedback.json"):
        with open("feedback.json", "r", encoding="utf-8") as file:  # Renamed 'f' to 'file'
            data = json.load(file)

        negative_feedbacks = [feedback for feedback in data["feedbacks"] if feedback.get("rating") == "negative"]
        return len(negative_feedbacks)
    return 0


async def stats(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    positive_count = count_positive_feedbacks()
    negative_count = count_negative_feedbacks()
    await update.message.reply_text(
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤: {positive_count}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤: {negative_count}"
    )


def save_statistics(positive_count, negative_count):
    stats_data = {
        "positive_feedbacks": positive_count,
        "negative_feedbacks": negative_count
    }

    with open("statistics.json", "w", encoding="utf-8") as file:  # Renamed 'f' to 'file'
        json.dump(stats_data, file, ensure_ascii=False, indent=4)


async def main() -> None:
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CallbackQueryHandler(handle_retry_task, pattern='^retry_task$'))
    application.add_handler(CallbackQueryHandler(handle_next_task, pattern='^next_task$'))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(year_choice, pattern='^2022$|^2021$|^2020$|^2019$'))
    application.add_handler(CallbackQueryHandler(part_choice, pattern='^part_'))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern='^answer_'))
    application.add_handler(CallbackQueryHandler(handle_go_to_use_of_english, pattern='^go_to_use_of_english$'))
    application.add_handler(CallbackQueryHandler(handle_resources, pattern='^resources$'))
    application.add_handler(CallbackQueryHandler(finish_test, pattern='^finish$'))
    application.add_handler(CallbackQueryHandler(back_to_parts, pattern='^back_to_parts$'))
    application.add_handler(CallbackQueryHandler(restart, pattern='^restart$'))
    application.add_handler(CallbackQueryHandler(lambda u, c: start(u, c), pattern='^back_to_main_menu$'))
    application.add_handler(CallbackQueryHandler(lambda u, c: resources(u, c), pattern='^back_to_main_menu$'))
    application.add_handler(CallbackQueryHandler(leave_feedback, pattern='^leave_feedback$'))
    application.add_handler(CallbackQueryHandler(handle_feedback_yes, pattern='^feedback_yes$'))
    application.add_handler(CallbackQueryHandler(handle_feedback_no, pattern='^feedback_no$'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_feedback))
    application.add_handler(CommandHandler("stats", stats))

    application.run_polling()


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
