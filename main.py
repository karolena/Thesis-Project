import json
import os

# –í–∞—à –∫–æ–¥
from config import BOT_TOKEN

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É
BOT_TOKEN = BOT_TOKEN


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN')
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É

file_path = "Updated_EVI.json"
if os.path.exists(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        exams_data = json.load(f)
else:
    print(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    exams_data = None

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '6357800099:AAH_9f1kk14c629YAbsyvAXVmSkNgfApdqU'

# –æ—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
score_conversion = {
    0: "–Ω–µ —Å–∫–ª–∞–≤", 1: "–Ω–µ —Å–∫–ª–∞–≤", 2: "–Ω–µ —Å–∫–ª–∞–≤", 3: "–Ω–µ —Å–∫–ª–∞–≤", 4: "–Ω–µ —Å–∫–ª–∞–≤", 5: "–Ω–µ —Å–∫–ª–∞–≤", 6: "–Ω–µ —Å–∫–ª–∞–≤",
    7: "–Ω–µ —Å–∫–ª–∞–≤", 8: "–Ω–µ —Å–∫–ª–∞–≤", 9: "–Ω–µ —Å–∫–ª–∞–≤", 10: "–Ω–µ —Å–∫–ª–∞–≤", 11: "–Ω–µ —Å–∫–ª–∞–≤",
    12: 100, 13: 106, 14: 111, 15: 116, 16: 121, 17: 125, 18: 128, 19: 132, 20: 135, 21: 138, 22: 141, 23: 144, 24: 147,
    25: 150, 26: 153, 27: 156, 28: 159, 29: 162, 30: 165,
    31: 168, 32: 170, 33: 173, 34: 177, 35: 180, 36: 183, 37: 186, 38: 189, 39: 192, 40: 195, 41: 197, 42: 200
}

# –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Ü—ñ–Ω–∫—É
rating_messages = {
    "–Ω–µ —Å–∫–ª–∞–≤": "Ooops, –º–æ–∂–µ —Å–ø—Ä–æ–±—É—î—à —â–µ —Ä–∞–∑? —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–≤—á–∏—Ç–∏ —â–µüôÉ",
    (100, 120): "congratulations, –ø–æ—Ä—ñ–≥ –ø—Ä–æ–π–¥–µ–Ω–æü§ó ",
    (121, 160): "well done, –Ω–µ–ø–æ–≥–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üòç",
    (161, 180): "AMAZING, —á—É–¥–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ü§ù ",
    (181, 199): "OMG YOUR RESULT IS REALLY COOL üòØ",
    200: "This is the highest score, we are so proud of you!ü•≥"
}

# –æ—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
score_conversion = {
    0: "–Ω–µ —Å–∫–ª–∞–≤", 1: "–Ω–µ —Å–∫–ª–∞–≤", 2: "–Ω–µ —Å–∫–ª–∞–≤", 3: "–Ω–µ —Å–∫–ª–∞–≤", 4: "–Ω–µ —Å–∫–ª–∞–≤",
    5: 100, 6: 108, 7: 116, 8: 124, 9: 130, 10: 134, 11: 137, 12: 140, 13: 143, 14: 146, 15: 148, 16: 150, 17: 152,
    18: 154, 19: 157, 20: 160, 21: 162, 22: 164, 23: 167,
    24: 170, 25: 174, 26: 177, 27: 182, 28: 188, 29: 194, 30: 200
}



# –ö–æ–º–∞–Ω–¥–∞ /–æ–±—Ä–æ–±–Ω–∏–∫ –∑–∞–ø—É—Å–∫—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("2023", callback_data='2023')],
        [InlineKeyboardButton("2022", callback_data='2022')],
        [InlineKeyboardButton("2021", callback_data='2021')],
        [InlineKeyboardButton("2020", callback_data='2020')],
        [InlineKeyboardButton("2019", callback_data='2019')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text('–í—ñ—Ç–∞—é –í–∞—Å –≤ –±–æ—Ç—ñ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –Ñ–í–Ü! –î–æ–ø–æ–º–æ–∂—É –í–∞–º —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ —ñ—Å–ø–∏—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó! –Ø–∫–∏–π —Ä—ñ–∫ —Ö–æ—á–µ—à –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏?:', reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text('–í—ñ—Ç–∞—é –í–∞—Å –≤ –±–æ—Ç—ñ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –Ñ–í–Ü! –î–æ–ø–æ–º–æ–∂—É –í–∞–º —É—Å–ø—ñ—à–Ω–æ —Å–∫–ª–∞—Å—Ç–∏ —ñ—Å–ø–∏—Ç –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó! –Ø–∫–∏–π —Ä—ñ–∫ —Ö–æ—á–µ—à –ø—Ä–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏?:', reply_markup=reply_markup)


async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    await start(update, context)


# –í–∏–±—ñ—Ä —Ä–æ–∫—É
async def year_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = query.data
    context.user_data['selected_year'] = selected_year
    context.user_data['total_score'] = 0

    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        keyboard = [
            [InlineKeyboardButton(part.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏'), callback_data=f"part_{part.get('name', 'unknown')}")]
            for part in parts]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_years')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è {selected_year} —Ä–æ–∫—É:", reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É
async def part_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_part = query.data.split('_')[1]
    context.user_data['selected_part'] = selected_part
    context.user_data['part_score'] = 0

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        tasks = next(part['tasks'] for part in parts if part.get('name', 'unknown') == selected_part)
        context.user_data['tasks'] = tasks
        context.user_data['current_task_index'] = 0

        await send_task(update, context)


# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tasks = context.user_data['tasks']
    current_task_index = context.user_data['current_task_index']
    task = tasks[current_task_index]

    text = f"–ó–∞–≤–¥–∞–Ω–Ω—è {task['task_number']}:\n{task['instructions']}\n\n"
    for t in task['texts']:
        text += f"{t}\n\n"

    for i, choice in enumerate(task['choices']):
        text += f"{chr(65 + i)}. {choice}\n"

    keyboard = [
        [InlineKeyboardButton(chr(65 + i), callback_data=f"answer_{chr(65 + i)}")] for i in range(len(task['choices']))
    ]
    keyboard.append([InlineKeyboardButton("–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ —Ç–µ—Å—Ç‚ùå", callback_data='finish')])
    keyboard.append([InlineKeyboardButton("–°–ª–æ–≤–Ω–∏—áüÜó", url='https://www.dictionary.cambridge.org/uk/dictionary/english-ukrainian/')])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥‚óÄÔ∏è", callback_data='back_to_parts')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_answer = query.data.split('_')[1]
    tasks = context.user_data['tasks']
    current_task_index = context.user_data['current_task_index']
    task = tasks[current_task_index]
    correct_answer = task['answers'][0]

    if user_answer == correct_answer:
        context.user_data['part_score'] += int(task['other_option']['score'])
        response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–≤–∂—É–π!"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}"

    await query.edit_message_text(text=response)

    context.user_data['current_task_index'] += 1
    if context.user_data['current_task_index'] < len(tasks):
        keyboard = [
            [InlineKeyboardButton("–î–∞–ª—ñ‚û°Ô∏è", callback_data='next')],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç‚ùå", callback_data='finish')],
            [InlineKeyboardButton("–°–ª–æ–≤–Ω–∏—áüÜó", url='https://www.dictionary.cambridge.org/uk/dictionary/english-ukrainian/')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥‚óÄÔ∏è", callback_data='back_to_parts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=f"–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è.", reply_markup=reply_markup)
    else:
        context.user_data['total_score'] += context.user_data['part_score']
        await finish_part(update, context)


# –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
async def next_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_task(update, context)


# –§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
async def finish_part(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    selected_part = context.user_data['selected_part']

    context.user_data['total_score'] += context.user_data['part_score']

    if selected_part == "Reading":
        result_text = f"–ß–∞—Å—Ç–∏–Ω–∞ Reading –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {context.user_data['part_score']} –±–∞–ª—ñ–≤."
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ Use of English ‚û°Ô∏è", callback_data='next_part')]]
    else:
        total_score = context.user_data['total_score']
        part_scores = context.user_data['part_score']
        reading_score = total_score - part_scores  # —Å—á–∏—Ç–∞–µ–º

        rating = score_conversion.get(total_score, "–Ω–µ —Å–∫–ª–∞–≤")
        rating_message = None

        if rating == "–Ω–µ —Å–∫–ª–∞–≤":
            rating_message = rating_messages["–Ω–µ —Å–∫–ª–∞–≤"]
        else:
            for range_key, message in rating_messages.items():
                if isinstance(range_key, tuple) and range_key[0] <= rating <= range_key[1]:
                    rating_message = message
                    break
                elif rating == range_key:
                    rating_message = message
                    break

        result_text = (f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: Reading {reading_score}/22 Use of English {part_scores}/20.\n"
                       f"\nüìç–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} \n –í–∞—à–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞: {rating}\n{rating_message}üìç")

        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç", callback_data='restart')],
                    [InlineKeyboardButton("–ö–æ—Ä–∏—Å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏üìñ",
                                          url='https://testportal.gov.ua/yedynyj-vstupnyj-ispyt-2/')],
                    [InlineKeyboardButton("–ó–Ω–∞–π—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞üë©üèª‚Äçüè´",
                                          url='https://buki.com.ua/blogs/layfkhaky-z-yevi-yedynyj-vstupnyj-ispyt-z-anhliyskoyi-movy/')]
                    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(text=result_text, reply_markup=reply_markup)


# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø—É—Å–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —Ç–µ—Å—Ç—É
async def next_part(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        part = next(part for part in parts if part['name'] == 'Use of English')
        tasks = part['tasks']
        context.user_data['selected_part'] = 'Use of English'
        context.user_data['tasks'] = tasks
        context.user_data['current_task_index'] = 0
        context.user_data['part_score'] = 0

        await send_task(update, context)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–∫—É
async def back_to_years(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await start(update, context)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—Ç–∏–Ω–∏
async def back_to_parts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    selected_year = context.user_data['selected_year']
    if exams_data:
        parts = next(part['parts'] for part in exams_data['exam_years'] if str(part['year']) == selected_year)
        keyboard = [
            [InlineKeyboardButton(part.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏'), callback_data=f"part_{part.get('name', 'unknown')}")]
            for part in parts]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥‚óÄÔ∏è", callback_data='back_to_years')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=f"–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è {selected_year} —Ä–æ–∫—É:", reply_markup=reply_markup)


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(year_choice, pattern='^\\d{4}$'))
    application.add_handler(CallbackQueryHandler(part_choice, pattern='^part_'))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern='^answer_'))
    application.add_handler(CallbackQueryHandler(next_task, pattern='^next$'))
    application.add_handler(CallbackQueryHandler(finish_part, pattern='^finish$'))
    application.add_handler(CallbackQueryHandler(next_part, pattern='^next_part$'))
    application.add_handler(CallbackQueryHandler(restart, pattern='^restart$'))
    application.add_handler(CallbackQueryHandler(back_to_years, pattern='^back_to_years$'))
    application.add_handler(CallbackQueryHandler(back_to_parts, pattern='^back_to_parts$'))

    application.run_polling()


if __name__ == '__main__':
    main()
